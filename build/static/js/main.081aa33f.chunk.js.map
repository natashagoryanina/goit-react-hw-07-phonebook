{"version":3,"sources":["redux/contacts/contactsActions.js","redux/contacts/contacts-operations.js","Components/contactsForm/ContactsFormStyled.js","redux/contacts-selectors.js","Components/contactsForm/ContactsForm.js","Components/contactsListItem/ContactsListItemStyled.js","Components/contactsListItem/ContactsListItem.js","Components/contactsList/ContactsListStyled.js","Components/contactsList/ContactsList.js","Components/filter/FilterStyled.js","redux/filter/filterActions.js","Components/filter/Filter.js","styles/globalStyles.js","Components/App.js","redux/contacts/contactsReducer.js","redux/filter/filterReducer.js","redux/store.js","index.js"],"names":["getContactRequest","createAction","getContactSuccess","getContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","axios","defaults","baseURL","FormContainer","styled","form","filterValueSelector","state","contacts","filter","contactSelector","items","loadingSelector","loading","filteredContactsSelector","createSelector","name","toLowerCase","includes","initialState","number","ContactsForm","useState","contactsForm","setContactsForm","useSelector","dispatch","useDispatch","addManualContact","contact","some","item","post","then","data","catch","error","addContact","alert","onFormChange","e","target","value","prev","onSubmit","preventDefault","id","uuidv4","className","type","onChange","pattern","title","required","ContactsListItemContainer","li","ContactsListItem","removeContact","delete","removeContactById","onClick","ContactsListContainer","ul","ContactsList","length","map","FilterContainer","label","onFilterChange","Filter","GlobalStyles","createGlobalStyle","App","useEffect","a","get","contactsReducer","createReducer","_","payload","loadingReducer","filterReducer","rootReducer","combineReducers","store","configureStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.081aa33f.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\";\n\nconst getContactRequest = createAction('contacts/getContactRequest');\nconst getContactSuccess = createAction('contacts/getContactSuccess');\nconst getContactError = createAction('contacts/getContactError');\n\nconst addContactRequest = createAction('contacts/addContactRequest');\nconst addContactSuccess = createAction('contacts/addContactSuccess');\nconst addContactError = createAction('contacts/addContactError');\n\nconst deleteContactRequest = createAction('contacts/deleteContactRequest');\nconst deleteContactSuccess = createAction('contacts/deleteContactSuccess');\nconst deleteContactError = createAction('contacts/deleteContactError');\n\nexport {\n    getContactRequest,\n    getContactSuccess,\n    getContactError,\n    addContactRequest, \n    addContactSuccess, \n    addContactError, \n    deleteContactRequest,\n    deleteContactSuccess,\n    deleteContactError,\n};\n","import axios from 'axios';\nimport { \n    getContactRequest,\n    getContactSuccess,\n    getContactError,\n    addContactError, \n    addContactRequest, \n    addContactSuccess,\n    deleteContactRequest,\n    deleteContactSuccess,\n    deleteContactError } from './contactsActions';\n\naxios.defaults.baseURL = 'http://localhost:3030';\n\nconst fetchContacts = () => async dispatch => {\n    dispatch(getContactRequest());\n\n    try {\n        const {data} = await axios.get('/contacts');\n        dispatch(getContactSuccess(data));\n    } catch (error) {\n        dispatch(getContactError(error));\n    };\n\n    // axios\n    // .get('/contacts')\n    // .then(({data}) => dispatch(getContactSuccess(data)))\n    // .catch(error => dispatch(getContactError(error)))\n};\n\nconst addContact = contact => dispatch => {\n    dispatch(addContactRequest());\n\n    axios\n    .post('/contacts', contact)\n    .then(({data}) => dispatch(addContactSuccess(data)))\n    .catch(error => dispatch(addContactError(error)))\n};\n\nconst removeContactById = id => dispatch => {\n    dispatch(deleteContactRequest());\n\n    axios\n    .delete(`/contacts/${id}`)\n    .then(() => dispatch(deleteContactSuccess(id)))\n    .catch(error => dispatch(deleteContactError(error)))\n};\n\nexport { fetchContacts, addContact, removeContactById};","import styled from 'styled-components';\n\nexport const FormContainer = styled.form`\n    display: flex;\n    flex-direction: column;\n\n    .formLabel {\n        margin-bottom: 20px;\n    }\n\n    .formInput {\n        background-color: #fff;\n        border: 1px solid #d5d9d9;\n        border-radius: 8px;\n        box-shadow: rgba(213, 217, 217, .5) 0 2px 5px 0;\n        box-sizing: border-box;\n        color: #0f1111;\n        cursor: pointer;\n        height: 25px;\n    }\n\n    .formText {\n        margin-bottom: 7px;\n        font-size: 18px;\n        line-height: 29px;\n    }\n\n    .addContactBtn {\n        width: 100px;\n    }\n\n`","import { createSelector } from 'reselect';\n\nexport const filterValueSelector = (state) => state.contacts.filter;\nexport const contactSelector = (state) => state.contacts.items;\nexport const loadingSelector = (state) => state.contacts.loading;\n\nexport const filteredContactsSelector = createSelector(\n    [contactSelector, filterValueSelector],\n    (contacts, filter) => contacts.filter(({name}) => name.toLowerCase().includes(filter.toLowerCase())),\n);","import React, { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from '../../redux/contacts/contacts-operations';\nimport { FormContainer } from './ContactsFormStyled';\nimport { contactSelector } from '../../redux/contacts-selectors';\n\nconst initialState = { \n    name: '',\n    number: ''\n};\n\nconst ContactsForm = () => {\n    const [contactsForm, setContactsForm] = useState(initialState);\n    const contacts = useSelector(contactSelector);\n\n    const dispatch = useDispatch();\n    const addManualContact = (contact) => {\n        const isCopy = contacts.some((item) => \n               item.name.toLowerCase() === contact.name.toLowerCase()\n            );\n        if(isCopy) {\n            alert(`${contact.name} is already in contacts.`);\n            return;\n        }\n        return dispatch(addContact(contact))\n    };\n\n    const onFormChange = (e) => {\n        const {name, value} = e.target;\n        setContactsForm((prev)=>({...prev, [name]: value }));\n    };\n\n    const onFormSubmit = (e) => {\n        const {name, number} = contactsForm;\n        e.preventDefault();\n        addManualContact({name: name, id:uuidv4(), number: number});\n        setContactsForm(initialState);\n    };\n\n    return (\n        <FormContainer onSubmit={onFormSubmit}>\n                <span className=\"formText\">Name:</span>\n                <label className=\"formLabel\">\n                    <input\n                        className=\"formInput\"\n                        type=\"text\"\n                        name=\"name\"\n                        onChange={onFormChange}\n                        value={contactsForm.name}\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                        required\n                    />\n                </label>\n                <span className=\"formText\">Number:</span>\n                <label className=\"formLabel\">\n                    <input\n                        className=\"formInput\"\n                        type=\"tel\"\n                        name=\"number\"\n                        onChange={onFormChange}\n                        value={contactsForm.number}\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n                        required\n                        />\n                </label>\n                <button className=\"addContactBtn\" type=\"submit\">\n                    Add contact\n                </button>\n        </FormContainer>\n    );\n};\n\nexport default ContactsForm;\n","import styled from 'styled-components';\n\nconst ContactsListItemContainer = styled.li`\n    display: flex;\n    flex-direction: row;\n    align-items: baseline;\n    margin-bottom: 15px;\n    font-size: 16px;\n    line-height: 29px;\n\n    .deleteBtn {\n        width: 65px;\n        margin-left: 10px;\n        margin-bottom: 0;\n    }\n`;\n\nexport default ContactsListItemContainer;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport ContactsListItemContainer from './ContactsListItemStyled';\nimport { removeContactById } from '../../redux/contacts/contacts-operations';\n\nconst ContactsListItem = ({contact}) => {\n    const dispatch = useDispatch();\n    const removeContact = (id) => dispatch(removeContactById(id));\n    \n    const remove = () => removeContact(contact.id);\n    \n    return (\n        <ContactsListItemContainer>\n            <span>{contact.name}: {contact.number}</span>\n            <button className=\"deleteBtn\" type=\"button\" onClick={remove}>Delete</button>\n        </ContactsListItemContainer>\n    );\n};\n\nContactsListItem.propTypes = {\n    contact: PropTypes.object,\n};\n\nexport default ContactsListItem;","import styled from 'styled-components';\n\nconst ContactsListContainer = styled.ul`\n    display: flex;\n    flex-direction: column;\n`;\n\nexport default ContactsListContainer;","import React from 'react';\nimport ContactsListItem from '../contactsListItem/ContactsListItem';\nimport ContactsListContainer from './ContactsListStyled';\nimport { useSelector } from 'react-redux';\nimport { filteredContactsSelector } from '../../redux/contacts-selectors';\n\nconst ContactsList = () => {\n    const contacts = useSelector(filteredContactsSelector);\n\n    return (\n        <ContactsListContainer>\n            {!!contacts.length ? contacts.map((contact)=> \n                <ContactsListItem contact={contact}/>\n            ) : <p>No contacts</p>}\n        </ContactsListContainer>\n    );\n};\n\nexport default ContactsList;\n\n","import styled from 'styled-components';\n\nconst FilterContainer = styled.label`\n    display: flex;\n    flex-direction: column;\n\n    .filterText {\n        margin-bottom: 7px;\n        font-size: 18px;\n        line-height: 29px;\n    }\n\n    .filterInput{\n        height: 25px;\n        width: 151px;\n        background-color: #fff;\n        border: 1px solid #d5d9d9;\n        border-radius: 8px;\n        box-shadow: rgba(213, 217, 217, .5) 0 2px 5px 0;\n        box-sizing: border-box;\n        color: #0f1111;\n        cursor: pointer;\n        margin-bottom: 20px;\n    }\n`;\n\nexport default FilterContainer;","import { createAction } from \"@reduxjs/toolkit\";\n\nconst onFilterChange = createAction('filter/onFilterChange');\n\nexport {onFilterChange};","import React from 'react';\nimport FilterContainer from './FilterStyled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { onFilterChange } from '../../redux/filter/filterActions';\nimport { filterValueSelector } from '../../redux/contacts-selectors';\n\nconst Filter = () => {\n    const value = useSelector(filterValueSelector);\n\n    const dispatch = useDispatch();\n    const onChange = (e) => dispatch(onFilterChange(e));\n    \n    return (\n        <FilterContainer>\n            <span className=\"filterText\">Find contacts by name</span>\n            <input \n                className=\"filterInput\"\n                type=\"text\" \n                name=\"filter\"\n                value={value}\n                onChange={onChange}\n            />\n        </FilterContainer>\n    );\n};\n\nexport default Filter;","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyles = createGlobalStyle`\n    body {\n        font-family: \"Amazon Ember\",sans-serif;\n        padding: 25px;\n    }\n\n    ul{\n        list-style: none;\n        padding: 0;\n    }\n\n    button {\n        background-color: #fff;\n        border: 1px solid #d5d9d9;\n        border-radius: 8px;\n        box-shadow: rgba(213, 217, 217, .5) 0 2px 5px 0;\n        box-sizing: border-box;\n        color: #0f1111;\n        cursor: pointer;\n        display: flex;\n        margin-bottom: 20px;\n        font-family: \"Amazon Ember\",sans-serif;\n        font-size: 13px;\n        line-height: 29px;\n        padding: 0 10px 0 11px;\n        position: relative;\n        text-align: center;\n        text-decoration: none;\n        vertical-align: middle;\n    }\n\n    button:hover {\n        background-color: #f7fafa;\n    }\n\n    button:focus {\n        border-color: #008296;\n        box-shadow: rgba(213, 217, 217, .5) 0 2px 5px 0;\n        outline: 0;\n    }\n\n    h1,\n    h2 {\n        margin-top: 0;\n    }\n`;\n\nexport default GlobalStyles;","import React, {useEffect} from 'react';\nimport ContactsForm from './contactsForm/ContactsForm';\nimport ContactsList from './contactsList/ContactsList';\nimport Filter from './filter/Filter';\nimport GlobalStyles from '../styles/globalStyles';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchContacts } from '../redux/contacts/contacts-operations';\nimport { loadingSelector } from '../redux/contacts-selectors';\n\nconst App = () => {\n    const loading = useSelector(loadingSelector);\n\n    const dispatch = useDispatch();\n    \n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n    return (\n        <main>\n            <GlobalStyles></GlobalStyles>\n            <h1>Phonebook</h1>\n            <ContactsForm/>\n            <Filter />\n            <h2>Contacts</h2>\n            {loading && <h3>Loading...</h3>}\n            <ContactsList/>\n        </main>\n    );\n};\n\nexport default App;\n","import { createReducer } from '@reduxjs/toolkit';\nimport { \n    getContactRequest,\n    getContactSuccess,\n    getContactError,\n    addContactSuccess, \n    addContactRequest, \n    addContactError, \n    deleteContactSuccess,\n    deleteContactRequest,\n    deleteContactError } from \"./contactsActions\";\n\nconst contactsReducer = createReducer([], {\n    [getContactSuccess]: (_, {payload}) => payload,\n    [addContactSuccess]: (state, {payload}) => {\n        return [...state, payload];\n    },\n    [deleteContactSuccess]: (state, {payload}) => {\n        return state.filter(contact => contact.id !== payload);\n    },\n});\n\nconst loadingReducer = createReducer(false, {\n    [getContactRequest]: () => true,\n    [getContactSuccess]: () => false,\n    [getContactError]: () => false,\n    [addContactRequest]: () => true,\n    [addContactSuccess]: () => false,\n    [addContactError]: () => false,\n    [deleteContactRequest]: () => true,\n    [deleteContactSuccess]: () => false,\n    [deleteContactError]: () => false,\n});\n\nexport { contactsReducer, loadingReducer};","import { createReducer } from '@reduxjs/toolkit';\nimport { onFilterChange } from './filterActions';\n\nconst filterReducer = createReducer('', {\n    [onFilterChange]: (state, {payload}) => {\n        const {value} = payload.target;\n        return `${value}`;\n    }\n});\n\nexport {filterReducer} ;","import { combineReducers } from 'redux';\nimport { configureStore } from '@reduxjs/toolkit';\nimport { contactsReducer, loadingReducer } from './contacts/contactsReducer';\nimport { filterReducer } from './filter/filterReducer';\n\nconst rootReducer = combineReducers({\n    items: contactsReducer,\n    filter: filterReducer,\n    loading: loadingReducer,\n});\n\nconst store = configureStore({\n    reducer: {\n        contacts: rootReducer\n    },\n});\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport './index.css';\nimport App from './Components/App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n      <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}